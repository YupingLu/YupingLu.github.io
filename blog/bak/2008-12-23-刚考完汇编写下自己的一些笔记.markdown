---
author: yupinglu
comments: true
date: 2008-12-23 12:01:00+00:00
layout: post
slug: 刚考完汇编，写下自己的一些笔记
title: 刚考完汇编，写下自己的一些笔记
wordpress_id: 163
categories:
- Assembly
tags:
- Assembly
---

将一个存储区的数据存入另一个存储区

DATA SEGMENT   
BUF1 DB 20,39,50,-20,0,-12   
BUF2 DB 6 DUP(0)   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME CD:CODE,SS:STACK,DS:DATA   
START: MOV AX,DATA   
MOV DS,AX   
MOV SI,OFFSET BUF1   
MOV DI,OFFSET BUF2   
MOV CX,6   
LOOPA: MOV AL,[SI]   
MOV [DI],AL   
INC SI   
INC DI   
DEC CX   
JNZ LOOPA   
MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   
用变址方式改写   
MOV AX,DATA   
MOV DS,AX   
MOV SI,0   
MOV CX,6   
LOOPA: MOV AL,BUF1[SI]   
MOV BUF2[SI],AL   
INC SI   
DEC CX   
JNZ LOOPA   
用基址加变址方式改写   
MOV AX,DATA   
MOV DS,AX   
LEA BX,BUF1   
LEA BP,BUF2   
MOV SI,0   
MOV CX,6   
LOOPA: MOV AL,[BX][SI]   
MOV DS:[BP][SI],AL       ;因为bp默认是ss段寄存器,所以要用段跨越符ds   
ADD SI,1   
DEC CX   
JNZ LOOPA   

获取存储区的大小

DATA SEGMENT   
BUF DB 20,33,0, 25   
NUM EQU NUM-BUF   
DATA ENDS   
STACK SEGMENT   
STACK DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,CS:CODE,SS:STACK   
START: MOV AX,DATA   
MOV DS,AX   
MOV DL,NUM   
MOV AH,2   
INT 21H   
MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   
;算术运算指令，除符号扩展指令外，均会不同程度地影响标志寄存器的标志位   

小知识点

CMP AX,0   
JGE EXIT ;如果(ax)>=0，则转exit   
NEG AX     ;如果(ax)<0,则ax求反   
、、   
EXIT:----;实现AX的求绝对值   
算术运算指令，OPS不能是立即数   
data segment   
a db 0   
b db 0   
data ends   

mov bl,al   
shr bl,4　　　　　　；将高位的ＢＣＤ码移至低位   
mov a,bl   
and al,0fh      ;取低位的ＢＣＤ码，并将高位清０   
mov b,bl   

另一种解法   
mov ah,0   
mov cl,16   
div cl             ;商，余数   
mov a,al          ;商即高位BCD码   
mov b,ah         ;余数即低位BCD码   
置汇编地址计数器伪指令   
DATA SEGMENT   
BUF DB '123ABCD---'   
COUNT EQU $-BUF   
DATA ENDS   
范例2   
DATA SEGMENT   
ORG 10            ;设置$的值为10，即该段的目标代码从偏移量10处开始产生   
BUF DB 'ABCD'        ;变量BUF的偏移地址为10   
ORG $+5             ;$的值增5   
NUM DW 50         ;变量NUM的偏移地址为19   
DATA ENDS   
;该程序段的功能是将当前数据段中的偏移地址为0-0F00H的全部字存储单元清0   
MOV SI,0   
L:MOV WORD PTR [SI],0   
ADD SI,2   
CMP SI,0F00H   
JBE L   
简单条件转移指令 JE/JZ        JNE/JNZ    JC   JNC   JS   JNS     JO   JNO JP/JPE   JNP/JPO   
无符号条件转移 JA/JNBE     JAE/JNB     JB/JNAE     JBE/JNA   
有符号条件转移 JG/JNLE     JGE/JNL     JL/JNGE    JLE/JNG   
无条件转移JMP   

乘法测试

DATA SEGMENT   
NUM DB 2   
A DB 2   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,SS:STACK,CS:CODE   
START: MOV AX,DATA   
MOV DS,AX   
MOV AL,A   
MUL NUM   
MOV DL,AL   
ADD DL,30H   
MOV AH,2   
INT 21H   
MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   

9,10号调用

DATA SEGMENT   
BUF DB 50,0,50 DUP(0)   
CRLF DB 0DH,0AH,'$'   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,SS:STACK,CS:CODE   
START: MOV AX,DATA   
MOV DS,AX   
LEA DX,BUF   
MOV AH,10   
INT 21H   
LEA DX,CRLF   
MOV AH,9   
INT 21H   
MOV BL,BUF+1   
MOV BH,0   
MOV BYTE PTR BUF+2[BX],'$'   
LEA DX,BUF+2   
MOV AH,9   
INT 21H   
MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   

二进制显式十六进制

DATA SEGMENT   
NUM DB 00111001B   
BUF DB 0AH,0DH,'(NUM)='   
BUF0 DB 4 DUP(?)   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,SS:STACK,CS:CODE   
START: MOV AX,DATA   
MOV DS,AX   
LEA DI,BUF0   
MOV AL,NUM   
MOV CL,4   
SHR AL,CL   
OR AL,30H   
MOV [DI],AL   
INC DI   
MOV AL,NUM   
AND AL,0FH   
OR AL,30H   
MOV [DI],AL   
INC DI   
MOV BYTE PTR [DI],'H'   
INC DI   
MOV BYTE PTR [DI],'$'   
LEA DX,BUF   
MOV AH,9   
INT 21H   
MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   

小写换大写

DATA SEGMENT   
BUF DB 'add ax,bx',0DH,0AH   
DB 'sub cx,10',0DH,0AH   
DB 'mov dx,1234h',0DH,0AH,'$'   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME CS:CODE,DS:DATA,SS:STACK   
START: MOV AX,DATA   
MOV DS,AX   
LEA BX,BUF   
LOPA: MOV DL,[BX]   
CMP DL,'$'   
JE EXIT   
CMP DL,'a'   
JB N   
CMP DL,'z'   
JA N   
SUB DL,20H   
N: MOV AH,2   
INT 21H   
INC BX   
JMP LOPA   
EXIT: MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   

16进制显示10进制

DATA SEGMENT   
BUF DB 20 DUP(0)   
BUF1 DB 0AH,0DH,'$'   
NUM = 2234H   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,CS:CODE,SS:STACK   
START: MOV AX,DATA   
MOV DS,AX   
LEA SI,BUF   
MOV DX,0   
MOV CX,0   
MOV AX,NUM   
MOV BX,0AH   
OS: DIV BX   
INC CX   
MOV [SI],DL   
INC SI   
MOV DX,0   
CMP AX,0   
JNE OS   
DEC SI   
SHOW: MOV DL,[SI]   
OR DL,30H   
MOV AH,2   
INT 21H   
DEC SI   
DEC CX   
JG SHOW   

MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   

求立方

DATA SEGMENT   
INPUT DB 'PLEASE INPUT X(0-9):$'   
TAB DW 0,1,28,27,64,125,216,343,512,729   
X DB ?   
XXX DW ?   
DATA ENDS   
STACK SEGMENt STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,CS:CODE,SS:STACK   
START: MOV AX,DATA   
MOV DS,AX   
LEA DX,INPUT   
MOV AH,9   
INT 21H   
MOV AH,1   
INT 21H   
AND AL,0FH       ;TRANSFORM THE ASCII CODE TO DECIMAL   
MOV X,AL   
XOR BX,BX   
MOV BL,2   
MUL BL   
MOV BX,AX   
MOV AX,TAB[BX]   
MOV XXX,AX   
MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   

ISOTHER

DATA SEGMENT   
OUTPUT DB 'INPUT THE CHAR OR NUMBER', 0AH, 0DH, '$'   
ENTER DB 0AH, 0DH, '$'   
DIGIT DB 1H   
LETTER DB 1H   
DATA ENDS   
CODE SEGMENT   
ASSUME DS:DATA, CS:CODE   
START:   
MOV AX, DATA   
MOV DS, AX   
LEA   DX, OUTPUT   
MOV AH, 9   
INT   21H   

NEXT:   
MOV AH, 1   
INT   21H   
CMP AL, 0DH   
JZ   EXIT   
CMP AL, '9'   
JB   ISLETTER   
CMP AL, 'A'   
JA   ISNUMBER   
JMP   NEXT   

ISLETTER:   
INC   LETTER   
JMP   NEXT   

ISNUMBER:   
INC   DIGIT   
JMP   NEXT   

EXIT:   
LEA   DX, ENTER   
MOV AH, 9   
INT   21H   
ADD DIGIT, 30H   
MOV DL, DIGIT   
MOV AH, 2   
INT   21H   
LEA   DX, ENTER   
MOV AH, 9   
INT   21H   
ADD LETTER, 30H   
MOV DL, LETTER   
MOV AH, 2   
INT   21H   
XOR AX, AX   
MOV AH, 4CH   
INT   21H   

CODE ENDS   
END START   

两个10进制相加显示成一个10进制

DATA SEGMENT   
INPUT DB 'PLEASE INPUT YOUR FIRST NUM:',0AH,0DH,'$'   
INPUT2 DB 'PLEASE INPUT YOUR SECOND NUM:',0AH,0DH,'$'   
X DB ?   
Y DB ?   
R DB ?   
INPUT3 DB 0DH,0AH,'$'   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME DS:DATA,CS:CODE,SS:STACK   
START: MOV AX,DATA   
MOV DS,AX   
LEA DX,INPUT   
MOV AH,9   
INT 21H   
MOV AH,1   
INT 21H   
CMP AL,'9'   
JBE FIRST   
SUB AL,37H   
JMP M1   
FIRST: SUB AL,30H   
M1: MOV X,AL   
LEA DX,INPUT3   
MOV AH,9   
INT 21H   
LEA DX,INPUT2   
MOV AH,9   
INT 21H   
MOV AH,1   
INT 21H   
CMP AL,'9'   
JBE SECOND   
SUB AL,37H   
JMP M2   
SECOND: SUB AL,30H   
M2: MOV Y,AL   
ADD AL,X   
MOV R,AL   
CMP R,9H   
JA M3   
LEA DX,INPUT3   
MOV AH,9   
INT 21H   
OR R,30H   
MOV DL,R   
MOV AH,2   
INT 21H   
JMP EXIT   

M3: LEA DX,INPUT3   
MOV AH,9   
INT 21H   

MOV AX,0   
MOV AL,R   
MOV CL,0AH   
DIV CL   
MOV R,0    
MOV R,AH   
MOV DL,AL    
ADD DL,30H   
MOV AH,2   
INT 21H   
MOV DL,R   
ADD DL,30H   
MOV AH,2   
INT 21H   

EXIT: MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   
输入0-F后加3以16进制显示   

DATA SEGMENT   
INPUT DB 'PLEASE INPUT YOUR NUM:',0AH,0DH,'$'   
NUM DB 0   
INPUT1 DB 0AH,0DH,'$'   
DATA ENDS   
STACK SEGMENT STACK   
DB 200 DUP(0)   
STACK ENDS   
CODE SEGMENT   
ASSUME SS:STACK,DS:DATA,CS:CODE   
START: MOV AX,DATA   
MOV DS,AX   
LEA DX,INPUT   
MOV AH,9   
INT 21H   

MOV AH,1   
INT 21H   
MOV NUM,AL   

LEA DX,INPUT1   
MOV AH,9   
INT 21H   

CMP NUM,'9'   
JA CO   
AND NUM,0FH   
JMP A   
CO: SUB NUM,37H   
A: ADD NUM,3   

CMP NUM,9   
JA B   
MOV DL,NUM   
ADD DL,30H   
MOV AH,2   
INT 21H      
JMP EXIT   

B: CMP NUM,15   
JA C   
MOV DL,NUM   
ADD DL,37H   
MOV AH,2   
INT 21H   
JMP EXIT   

C: MOV AL,NUM   
MOV AH,0   
MOV CL,10H   
DIV CL   
MOV NUM,AH   
MOV DL,AL   
ADD DL,30H   
MOV AH,2   
INT 21H   

MOV DL,NUM   
ADD DL,30H   
MOV AH,2   
INT 21H   

EXIT: MOV AH,4CH   
INT 21H   
CODE ENDS   
END START   
